# Test for accession to handle function
# Multiple Entre.efetch test. 10 records combined with rRNA search. 
# Combined with rRNA search
#TODO Multithreading verkar funka 
print("-------Test for handle parsing to make sure it is adaptable with fetch-------")
print("----------------------------10 records MAX-----------------------------------")

def accession_to_rRNA_interval(accession_numbers): #!!!! added res

    
    print("Fetching accession %s from GenBank\n" % (accession_numbers))
    print("")
    

    Entrez.email = "Felix.wae@gmail.com" #Always tell NCBI who you are
    Entrez.api_key = "7b4a5e9841f79495be73767323ad485fda08" #Always use key

    result = {}

    try: 
        with Entrez.efetch(
            db="nucleotide", rettype="gbwithparts", retmode="text", id=accession_numbers
        ) as handle:
            for index, seq_record in enumerate(SeqIO.parse(handle, "gb")):
                print()
                print("Accession number: ", seq_record.id)
                print(
                    "Sequence length %i, %i features, from: %s"
                    % (
                        len(seq_record),
                        len(seq_record.features),
                        seq_record.annotations["source"],
                    )
                )
                temp = []
                for feature in seq_record.features: 
                    if feature.type == "rRNA":
                        for product in feature.qualifiers.get("product"):

                            if "16S" in product:
                                print(feature.qualifiers.get("product"), feature.location)
                                temp.append(str(feature.location))
                result[seq_record.id] = temp     
                #res[seq_record.id] = temp #!!!!!!!Added
        return result        #!!!! Commented out

    except Exception:
        sys.stderr.write("Error! Cannot fetch: %s        \n" % accession_numbers)

#----------------------------------------------------------------------------------------
#accession_numbers = "NC_000913.3, NC_000964.3, NC_002516.2, NZ_CP041016.1, NZ_AP023438.1, NC_022737.1, NZ_CP013444.1, NZ_CP086979.1, NZ_CP085753.1, NZ_CP012026.1"

import os  # Should be imported once
import threading  # Should be imported once
import time
from Bio import Entrez  # Should be imported once
from Bio import SeqIO  # Should be imported once
#import sys

t0 = time.time()

res = accession_to_rRNA_interval("NC_000913.3, NC_000964.3")
#, NC_002516.2, NZ_CP041016.1, NZ_AP023438.1, NC_022737.1, NZ_CP013444.1, NZ_CP086979.1, NZ_CP085753.1, NZ_CP012026.1")

"""
# Test threading here. 
ac_nr_list = ["NC_000913.3", "NC_000964.3", "NC_002516.2", "NZ_CP041016.1", "NZ_AP023438.1", "NC_022737.1", "NZ_CP013444.1", "NZ_CP086979.1", "NZ_CP085753.1", "NZ_CP012026.1"]
res = {}
threads = {}
#Iterate over list
for x in ac_nr_list:
    threads[x] = threading.Thread(target = accession_to_rRNA_interval, args =(x, res))
for x in threads:
    threads[x].start() # Can move this into the loop above. 
for x in threads:
    threads[x].join()
"""
"""
res = {}
t1 = threading.Thread(target = accession_to_rRNA_interval, args =( ["NC_000913.3"], res))
t2 = threading.Thread(target = accession_to_rRNA_interval, args =( ["NC_000964.3"], res))
# starting thread 1
t1.start()
# starting thread 2
t2.start()
# wait until thread 1 is completely executed
t1.join()
# wait until thread 2 is completely executed
t2.join()
"""

print("")
print("Testing if it worked") # Seems to work. Test the speed in comparison 300 for 10 last time. 
for x in res:
    print(x)
    print(res[x])
    print(res[x][0][1:-5])
    print(res[x][0][-2])
    print("")

t1 = time.time()
print("")
total = t1-t0
print(total)
print("")
print("------------------Test done----------------")


"""
# To check if downloaded
Entrez.email = "A.N.Other@example.com"  # Always tell NCBI who you are
filename = "EU490707.gbk"
if not os.path.isfile(filename):
    # Downloading...
    net_handle = Entrez.efetch(
        db="nucleotide", id="EU490707", rettype="gb", retmode="text"
    )
    out_handle = open(filename, "w")
    out_handle.write(net_handle.read())
    out_handle.close()
    net_handle.close()
    print("Saved")

print("Parsing...")
record = SeqIO.read(filename, "genbank")
print(record)
"""